{"version":3,"sources":["components/ToastAlert.js","components/Search/index.js","components/navigationBar.js","routes/mainPageRoutes.js","routers/mainPageRouter.js","App.js","reportWebVitals.js","index.js"],"names":["themed","style","borderRadius","boxShadow","ToastAlert","useState","position","reverseOrder","Search","center","changeLocation","usePlacesAutocomplete","requestOptions","location","lat","lng","radius","ready","value","suggestions","status","data","setValue","clearSuggestions","handleSelect","address","a","getGeocode","results","getLatLng","console","log","onSelect","onChange","e","target","disabled","placeholder","map","id","description","className","NavigationBar","Navbar","fixed","expand","collapseOnSelect","Container","Brand","href","translate","Collapse","Nav","mainPageRoutes","path","exact","component","lazy","name","MainPageRouter","Suspense","fallback","routes","route","index","render","props","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2MAEaA,EAAS,CACpBC,MAAO,CACLC,aAAc,IACdC,UAAW,0DAGA,SAASC,IACtB,MAAgCC,mBAAS,aAAzC,mBAAOC,EAAP,UACA,OAAO,cAAC,IAAD,CAASA,SAAUA,EAAUC,cAAc,M,wJCCvCC,EAAS,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,eAC/B,EAMIC,YAAsB,CACxBC,eAAgB,CACdC,SAAU,CACRC,IAAK,kBAAML,EAAOK,KAClBC,IAAK,kBAAMN,EAAOM,MAEpBC,OAAQ,OAXVC,EADF,EACEA,MACAC,EAFF,EAEEA,MAFF,IAGEC,YAAeC,EAHjB,EAGiBA,OAAQC,EAHzB,EAGyBA,KACvBC,EAJF,EAIEA,SACAC,EALF,EAKEA,iBAaIC,EAAY,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACnBJ,EAASG,GAAS,GAClBF,IAFmB,kBAIKI,YAAW,CAAEF,YAJlB,cAIXG,EAJW,gBAKUC,YAAUD,EAAQ,IAL5B,gBAKTd,EALS,EAKTA,IAAKC,EALI,EAKJA,IACbL,EAAeI,EAAKC,GANH,kDAQjBe,QAAQC,IAAR,MARiB,0DAAH,sDAWlB,OACE,eAAC,IAAD,CAAUC,SAAUR,EAApB,UACE,cAAC,IAAD,CACEN,MAAOA,EACPe,SAlBc,SAACC,GACnBZ,EAASY,EAAEC,OAAOjB,QAkBdkB,UAAWnB,EACXoB,YAAY,sBAEd,cAAC,IAAD,UACE,cAAC,IAAD,UACc,OAAXjB,GACCC,EAAKiB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAP,OACP,cAAC,IAAD,CAEEtB,MAAOsB,EACPC,UAAU,eAFLF,c,wBCrDRG,EAAgB,WAC3B,OACE,mCACE,cAACC,EAAA,EAAD,CACEC,MAAM,MACNC,OAAO,KACPJ,UAAU,sCACVK,kBAAgB,EAChB7C,MAAO,CACLE,UAAW,oCANf,SASE,eAAC4C,EAAA,EAAD,WACE,cAACJ,EAAA,EAAOK,MAAR,CAAcP,UAAU,eAAeQ,KAAK,IAAIC,UAAU,KAA1D,yBAGA,cAACP,EAAA,EAAOQ,SAAR,CAAiBV,UAAU,sBAA3B,SACE,cAACW,EAAA,EAAD,e,iKChBCC,EAAiB,CAC5B,CACEC,KAAM,IACNC,OAAO,EACPC,UALeC,gBAAK,kBAAM,sDAM1BC,KAAM,e,uBCAGC,EAAiB,WAC5B,OACE,qCACE,cAAC,IAAD,IACA,cAACvD,EAAA,EAAD,IACA,cAAC,IAAMwD,SAAP,CACEC,SACE,qBAAKpB,UAAU,sBAFnB,SAME,cAAC,IAAD,UACGqB,EAAOxB,KAAI,SAACyB,EAAOC,GAClB,OAAOD,EAAMP,UACX,cAAC,IAAD,CAEEF,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,MACbG,KAAMK,EAAML,KACZO,OAAQ,SAACC,GAAD,OAAW,cAACH,EAAMP,UAAP,eAAqBU,MAJnCF,GAML,gBCZDG,MAVf,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOZ,OAAK,EAACD,KAAK,IAAIE,UAAWG,SCE1BS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e39ecc91.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Toaster } from \"react-hot-toast\";\nexport const themed = {\n  style: {\n    borderRadius: \"0\",\n    boxShadow: \"0 2px 4px rgb(0 0 0 / 8%), 0 4px 12px rgb(0 0 0 / 8%)\",\n  },\n};\nexport default function ToastAlert() {\n  const [position, setPosition] = useState(\"top-right\");\n  return <Toaster position={position} reverseOrder={false} />;\n}\n","import {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nexport const Search = ({ center, changeLocation }) => {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => center.lat,\n        lng: () => center.lng,\n      },\n      radius: 200 * 1000,\n    },\n  });\n  const handleInput = (e) => {\n    setValue(e.target.value);\n  };\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n    try {\n      const results = await getGeocode({ address });\n      const { lat, lng } = await getLatLng(results[0]);\n      changeLocation(lat, lng);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <Combobox onSelect={handleSelect}>\n      <ComboboxInput\n        value={value}\n        onChange={handleInput}\n        disabled={!ready}\n        placeholder=\"Search a location\"\n      />\n      <ComboboxPopover>\n        <ComboboxList>\n          {status === \"OK\" &&\n            data.map(({ id, description }) => (\n              <ComboboxOption\n                key={id}\n                value={description}\n                className=\"search_item\"\n              />\n            ))}\n        </ComboboxList>\n      </ComboboxPopover>\n    </Combobox>\n  );\n};\n","import { Navbar, Nav, Container } from \"react-bootstrap\";\nexport const NavigationBar = () => {\n  return (\n    <>\n      <Navbar\n        fixed=\"top\"\n        expand=\"lg\"\n        className=\"navbar-custom navbar-light bg-light\"\n        collapseOnSelect\n        style={{\n          boxShadow: \"0px 0px 2px 0px rgba(0,0,0,0.75)\",\n        }}\n      >\n        <Container>\n          <Navbar.Brand className=\"navbar-brand\" href=\"/\" translate=\"no\">\n            KINICH-AHAU\n          </Navbar.Brand>\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Nav></Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n","import { lazy } from \"react\";\nconst HomeScreen = lazy(() => import(\"../screens/HomeScreen\"));\nexport const mainPageRoutes = [\n  {\n    path: \"/\",\n    exact: true,\n    component: HomeScreen,\n    name: \"HomeScreen\",\n  },\n];\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\n// ? Components\nimport { mainPageRoutes as routes } from \"routes/mainPageRoutes\";\nimport { NavigationBar } from \"components\";\nimport ToastAlert from \"components/ToastAlert\";\nexport const MainPageRouter = () => {\n  return (\n    <>\n      <NavigationBar />\n      <ToastAlert/>\n      <React.Suspense\n        fallback={\n          <div className=\"loading_container\">\n          </div>\n        }\n      >\n        <Switch>\n          {routes.map((route, index) => {\n            return route.component ? (\n              <Route\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                name={route.name}\n                render={(props) => <route.component {...props} />}\n              />\n            ) : null;\n          })}\n        </Switch>\n      </React.Suspense>\n    </>\n  );\n};\n","import \"./App.scss\";\n\n//* Importing bootstrap css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { MainPageRouter } from \"routers/mainPageRouter\";\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={MainPageRouter} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}